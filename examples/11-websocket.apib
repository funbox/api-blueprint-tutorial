FORMAT: 1A

# Resource Prototypes API

Example of API for non-HTTP interactions. To define non-HTTP interactions one can use [Group](https://github.com/funbox/api-blueprint/blob/master/API%20Blueprint%20Specification.md#def-resourcegroup-section), [SubGroup](https://github.com/funbox/api-blueprint/blob/master/API%20Blueprint%20Specification.md#def-subgroup-section)
and [Message](https://github.com/funbox/api-blueprint/blob/master/API%20Blueprint%20Specification.md#def-message-section) sections.

# Data Structures

## ChatMessage
+ id: 1 (number, required)
+ author
  + id: 42 (number, required)
  + name: `John Smith` (string, required)
+ text: `Hello world` (string, required)

# Group /chat_messages

Use `Group` section to create a group of entities as you do with a group of resources.

## SubGroup chat:id

Messages from chat with `id` identifier

Sometimes a one-level group is not enough. `SubGroup` section allows you to create a subgroup of entities.
If API doesn't need multiple levels of grouping, you can add `Message` sections directly to `Group` section.

### Message ServerToClientMessage
Chat messages are transferred from a server to a client immediately after creation.

`Message` section allows you to describe an entity with data in JSON format (using MSON language). The exact interpretation of an entity depends on context.
In the current example, `Message` section describes a message that can travel from a WebSocket-server to a client or from a WebSocket-client to a server.

+ Attributes (ChatMessage)

### Message ServerToClientMessage NewParticipant
Notification about new member in the channel.
+ Attributes
    + name: `John` (string, required) - member name

### Message ClientToServerMessage
+ Attributes
    + text: `Hello world` (string, required) - message text
